---
import { getCollection } from 'astro:content';
import DocLayout from '../../layouts/DocLayout.astro';
import CodeTabs from '../../components/CodeTabs';

export const prerender = true;

function extractCode(content: string) {
  // Remove frontmatter
  const contentWithoutFrontmatter = content.replace(/^---[\s\S]*?---/, '').trim();
  
  // Extract code block
  const codeMatch = contentWithoutFrontmatter.match(/```(\w+)\n([\s\S]*?)```/);
  if (codeMatch) {
    console.log("Found code block for language:", codeMatch[1]);
    return codeMatch[2].trim();
  }
  
  console.log("No code block found in content");
  return contentWithoutFrontmatter.trim();
}

export async function getStaticPaths() {
  const docs = await getCollection('docs');
  return docs.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
if (!entry) {
  return new Response('Not Found', { status: 404 });
}

const { Content } = await entry.render();

const basePath = entry.slug.split('/').slice(0, -1).join('/');
const isIndexPage = entry.slug.endsWith('index');
let codeTabs = [];

if (isIndexPage) {
  try {
    const allDocs = await getCollection('docs');
    const relatedDocs = allDocs.filter(doc => 
      doc.slug.startsWith(basePath) && 
      doc.slug !== entry.slug && 
      doc.data.lang
    );

    codeTabs = relatedDocs.map(doc => {
      const code = extractCode(doc.body);
      console.log(`Processing ${doc.slug} with language ${doc.data.lang}`);
      return {
        lang: doc.data.lang,
        content: code
      };
    });

    codeTabs.sort((a, b) => {
      const order = { rust: 1, python: 2, cpp: 3 };
      return order[a.lang] - order[b.lang];
    });

    console.log("Final codeTabs:", codeTabs);
  } catch (error) {
    console.error('Error processing related docs:', error);
    codeTabs = [];
  }
}
---

<DocLayout frontmatter={entry.data}>
  <Content />
  {codeTabs.length > 0 && (
    <div class="mt-8">
      <CodeTabs client:load tabs={codeTabs} />
    </div>
  )}
</DocLayout>
